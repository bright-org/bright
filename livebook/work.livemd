# Untitled notebook

## Section

```elixir
defmodule Test do
  alias Bright.UserSkillPanels.UserSkillPanel
  alias Bright.SkillScores.SkillClassScore
  import Ecto.Query, warn: false
  use Ecto.Schema
  alias Bright.Repo

  def get_level_by_class_in_skills_panel(user_id) do
    from(user_skill_panel in UserSkillPanel,
      join: skill_panel in assoc(user_skill_panel, :skill_panel),
      join: skill_classes in assoc(skill_panel, :skill_classes),
      left_join: skill_class_scores in assoc(skill_classes, :skill_class_scores),
      on: skill_class_scores.user_id == ^user_id,
      where: user_skill_panel.user_id == ^user_id,
      preload: [
        skill_panel:
          {skill_panel, skill_classes: {skill_classes, skill_class_scores: skill_class_scores}}
      ]
    )
    |> Repo.all()
  end

  def convert(user_skill_panels) do
    user_skill_panels
    |> Enum.map(&convert_row/1)
  end

  def convert_row(user_skill_panel) do
    %{name: name, skill_classes: skill_classes} = user_skill_panel.skill_panel

    skill_classes =
      skill_classes
      |> Enum.map(&convert_class_score_row/1)

    %{name: name, skill_classes: skill_classes}
  end

  def convert_class_score_row(%{skill_class_scores: []}) do
    "none"
  end

  def convert_class_score_row(%{skill_class_scores: skill_class_scores}) do
    skill_class_scores
    |> List.first()
    |> Map.get(:level)
  end
end

Test.get_level_by_class_in_skills_panel("01H76EC57N8JZHT5M3WZ0P7VAB")
|> Test.convert()
```

```elixir
defmodule Test2 do
  alias Bright.Accounts.User
  import Ecto.Query, warn: false
  alias Bright.Repo

  def user() do
    User
    |> Repo.all()
  end
end

Test2.user()
```

```elixir

```
