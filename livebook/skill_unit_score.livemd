# Untitled notebook

## Section

```elixir
alias Bright.Accounts
alias Bright.SkillUnits
alias Bright.SkillScores
alias Bright.UserSkillPanels
alias Bright.SkillPanels
alias Bright.Repo

user = Accounts.get_user_by_name_or_email("ymn")

user_panel =
  UserSkillPanels.get_level_by_class_in_skills_panel(user.id)
  |> Enum.at(1)

# %{skill_classes: skill_classes} = SkillPanels.get_skill_panel!(user_panel.id) |> Repo.preload(:skill_classes)
SkillPanels.get_skill_panel!(user_panel.id) |> Repo.preload(:skill_classes)
# class = skill_classes |> List.first()

# SkillScores.list_skill_scores_from_skill_class_score(%{skill_class_id: class.id, user_id: user.id})
```

```elixir
defmodule Test do
  alias Bright.SkillScores.SkillUnitScore
  alias Bright.SkillPanels.SkillClass
  alias Bright.Repo
  import Ecto.Query, warn: false
  use Ecto.Schema

  def get_skill_gem(user_id, skill_panel_id, class) do
    from(skill_unit_score in SkillUnitScore,
      join: skill_unit in assoc(skill_unit_score, :skill_unit),
      join: skill_classes in assoc(skill_unit, :skill_classes),
      on: skill_classes.class == ^class,
      on: skill_classes.skill_panel_id == ^skill_panel_id,
      where: skill_unit_score.user_id == ^user_id,
      preload: [:skill_unit]
    )
    |> Repo.all()
    |> Enum.map(&get_skill_gem_row/1)
  end

  defp get_skill_gem_row(row) do
    %{name: row.skill_unit.name, percentage: row.percentage}
    # row
  end
end

Test.get_skill_gem(user.id, user_panel.id, 1)
```
