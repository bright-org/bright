# 大量のスキルパネル作成

```elixir
alias Bright.{Repo, SkillPanels, SkillUnits}
```

## スキルパネルの作成

```elixir
defmodule TestData do
  def skill_panel(no) do
    %{
      name: "スキルパネル名#{no}",
      skill_classes: [
        %{name: "#{no}-クラス1", class: 1},
        %{name: "#{no}-クラス2", class: 2},
        %{name: "#{no}-クラス3", class: 3}
      ]
    }
  end

  def skill_unit(skill_class, panel_no) do
    %{
      name: "#{panel_no}-スキルユニット(class:#{skill_class.class})",
      skill_categories:
        for x <- 1..3 do
          skill_categories(panel_no, x, skill_class)
        end,
      skill_class_units: [
        %{skill_class_id: skill_class.id, position: 1}
      ]
    }
  end

  def skill_categories(panel_no, no, skill_class) do
    %{
      name: "#{panel_no}-#{no}カテゴリ(class:#{skill_class.class})",
      position: no,
      skills:
        for x <- 1..3 do
          %{name: "#{panel_no}-#{no}-#{x}-スキル(class:#{skill_class.class})", position: x}
        end
    }
  end

  def create_skill_unit(skill_class) do
    for x <- 1..5 do
      {:ok, _skill_unit} = SkillUnits.create_skill_unit(skill_unit(skill_class, x))
    end
  end

  def main() do
    {:ok, skill_panel} = SkillPanels.create_skill_panel(skill_panel(1))
    skill_panel.skill_classes |> Enum.each(&create_skill_unit/1)
  end
end

TestData.main()
```

## Get SkillUnit and preload associations with correct order

```elixir
[skill_unit | _] =
  SkillUnits.list_skill_units()
  |> Repo.preload(:skill_classes, skill_categories: :skills)

skill_unit.skill_classes
```
