# メッセージを作るサンプル

## Section

```elixir
alias Bright.Notifications
alias Bright.Accounts
```

```elixir
user = Accounts.get_user_by_name("ymn")

attr = %{
  from_user_id: user.id,
  to_user_id: user.id,
  icon_type: "person",
  message: "nakoさんからの紹介 / mikaさん / Web開発（Elixir）",
  type: "recruitment_coordination",
  url: "sss"
}

Notifications.create_notification(attr)
```

```elixir
user = Accounts.get_user_by_name("ymn")

defmodule TestData do
  def create_data(type, id) do
    attr = %{
      from_user_id: id,
      to_user_id: id,
      icon_type: "person",
      message: "テストデータ" <> type,
      type: type,
      url: "sss"
    }

    Notifications.create_notification(attr)
  end
end

["team invite", "daily", "weekly", "recruitment_coordination", "skill_panel_update", "operation"]
|> Enum.each(fn x -> TestData.create_data(x, user.id) end)
```

```elixir
Notifications.list_notifications()
```

```elixir
user = Accounts.get_user_by_name("ymn")
Notifications.list_notification_by_type(user.id, "recruitment_coordination")
```
